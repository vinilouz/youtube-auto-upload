// ./functions/login.js
const fs = require('fs');
const path = require('path');
const config = require('../config');
const slugify = require('slugify');
const { chromium } = require('playwright');
const { getLatestUserAgent, randomPause, color, rootPath } = require('./utils');
const targetUrl = 'https://www.youtube.com/account';

async function loginAccount(account, userDataDir) {
  const context = await chromium.launchPersistentContext(userDataDir, {
    headless: false,
    viewport: { width: 1280, height: 720 },
    userAgent: await getLatestUserAgent(),
    locale: 'pt-BR',
    isMobile: false,
    hasTouch: false,
    javaScriptEnabled: true,
    ignoreHTTPSErrors: true,
    args: [
      '--disable-blink-features=AutomationControlled',
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-infobars',
      '--window-position=0,0',
      '--ignore-certifcate-errors',
      '--ignore-certifcate-errors-spki-list',
    ],
  });

  const page = await context.newPage();

  await page.goto(targetUrl);

  await randomPause();

  const emailField = page.locator('input#identifierId');
  await emailField.hover();
  await emailField.click();
  await randomPause();
  await emailField.fill(account.email);
  await randomPause();

  const submitButtonEmail = page.locator('#identifierNext button[jsaction]');
  await submitButtonEmail.hover();
  await submitButtonEmail.click();
  await randomPause();

  const passField = page.locator('#password input[name="Passwd"]');
  await passField.hover();
  await passField.click();
  await randomPause();
  await passField.fill(account.password);
  await randomPause();

  const submitButtonPass = page.locator('#passwordNext button[jsaction]');
  await submitButtonPass.hover();
  await submitButtonPass.click();
  await randomPause();


  await page.waitForURL(targetUrl);

  if (page.url() === targetUrl) {
    console.log(color('üéâ Login realizado com sucesso para a conta ', 32) + color(account.name, 35));
    await context.storageState({ path: path.join(userDataDir, 'sessionState.json') });
  } else {
    console.error('N√£o foi poss√≠vel encontrar a p√°gina de sucesso.');
  }

  await context.close();
}

(async () => {
  for (const account of config.accounts) {
    const dirName = slugify(account.name, { lower: true });
    const userDataDir = path.join(rootPath, `user-data-${dirName}`);

    if (fs.existsSync(userDataDir)) {
      console.log(
        color('Sess√£o para ', 33) +
        color(account.name, 35) +
        color(' j√° existente', 33)
      );
    } else {
      await loginAccount(account, userDataDir);
    }
  }
})();
// fim do arquivo

// ./functions/manual_login.js
const path = require('path');
const config = require('../config');
const slugify = require('slugify');
const { chromium } = require('playwright');
const { getLatestUserAgent, color, rootPath } = require('./utils');

async function manualLogin(account) {
  const dirName = slugify(account.name, { lower: true });
  const userDataDir = path.join(rootPath, `user-data-${dirName}`);

  const context = await chromium.launchPersistentContext(userDataDir, {
    headless: false,
    viewport: { width: 1280, height: 720 },
    userAgent: await getLatestUserAgent(),
    locale: 'pt-BR',
    isMobile: false,
    hasTouch: false,
    javaScriptEnabled: true,
    ignoreHTTPSErrors: true,
    args: [
      '--disable-blink-features=AutomationControlled',
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-infobars',
      '--window-position=0,0',
      '--ignore-certifcate-errors',
      '--ignore-certifcate-errors-spki-list',
    ],
  });

  const page = await context.newPage();

  await page.goto('https://www.youtube.com/account');

  console.log(`Por favor, fa√ßa login manualmente para a conta ${account.name}`);
  console.log("Pressione Enter quando o login estiver conclu√≠do...");

  await new Promise(resolve => process.stdin.once('data', resolve));

  await context.storageState({ path: path.join(userDataDir, 'sessionState.json') });

  console.log(color('üéâ Sess√£o salva para a conta ', 32) + color(account.name, 35));

  await context.close();
  process.exit();
  return;
}

(async () => {
  for (const account of config.accounts) {
    await manualLogin(account);
  }
})();
// fim do arquivo

// ./functions/upload.js
const { chromium } = require('playwright');
const path = require('path');
const fs = require('fs');
const config = require('../config');
const slugify = require('slugify');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const { getLatestUserAgent, randomPause, color, rootPath } = require('./utils');

const argv = yargs(hideBin(process.argv))
  .option('name', {
    alias: 'n',
    type: 'string',
    description: 'Nome da conta a ser usada'
  })
  .argv;

async function uploadVideo(page, videoConfig, filePath) {
  await page.goto('https://studio.youtube.com/');
  await randomPause();

  await page.click('#create-icon > ytcp-button-shape > button');
  await randomPause();

  await page.click('#text-item-0 > ytcp-ve > tp-yt-paper-item-body > div > div > div > yt-formatted-string');
  await randomPause();

  const uploadInput = page.locator('#content > input[type=file]');
  await uploadInput.setInputFiles(filePath);
  await randomPause();

  // Get videoUrl
  const videoUrlSelector = '.ytcp-video-metadata-editor-sidepanel .ytcp-video-info > .ytcp-video-info > .ytcp-video-info > .ytcp-video-info.video-url-fadeable > a.ytcp-video-info';
  await page.waitForSelector(videoUrlSelector, { visible: true });
  const videoUrl = await page.$eval(videoUrlSelector, el => el.href);

  if (videoConfig.title) {
    await page.click('#basics.ytcp-video-metadata-editor #title-wrapper #textbox');
    await page.keyboard.press('Control+A');
    await page.keyboard.type(videoConfig.title);
    await randomPause();
  }

  if (videoConfig.description) {
    await page.click('#basics.ytcp-video-metadata-editor #description-textarea #child-input');
    await page.keyboard.type(videoConfig.description);
    await randomPause();
  }

  // IS FOR KIDS?
  await page.waitForSelector('#audience > ytkc-made-for-kids-select > div.made-for-kids-rating-container.ytkc-made-for-kids-select .made-for-kids-group', { visible: true });
  if (videoConfig.kids === true) {
    await page.click('[name="VIDEO_MADE_FOR_KIDS_MFK"]');
  } else {
    await page.click('[name="VIDEO_MADE_FOR_KIDS_NOT_MFK"]');
  }
  await randomPause();

  // Abrir bot√£o de mais op√ß√µes
  await page.click('#toggle-button > ytcp-button-shape > button[aria-label="Show more"]');
  await randomPause();

  // TAGS
  if (videoConfig.tags && Array.isArray(videoConfig.tags)) {
    await page.waitForSelector('#chip-bar #text-input', { visible: true });
    for (const tag of videoConfig.tags) {
      await page.click('#chip-bar #text-input');
      await page.keyboard.type(tag);
      await page.keyboard.press('Enter');
      await randomPause();
    }
  }

  // ALERT SUBS
  await page.waitForSelector('#notify-subscribers', { visible: true });
  const notifySubscribersCheckbox = await page.$('#notify-subscribers');
  const isChecked = await notifySubscribersCheckbox.evaluate(el => el.getAttribute('aria-checked') === 'true');
  if (videoConfig.alertSubs === true && !isChecked) {
    await notifySubscribersCheckbox.click();
  } else if (videoConfig.alertSubs !== true && isChecked) {
    await notifySubscribersCheckbox.click();
  }
  await randomPause();

  for (let i = 0; i < 3; i++) {
    // Checar a visibilidade do bot√£o "#next-button > ytcp-button-shape > button" antes de fazer varios cliques
    await page.click('#next-button > ytcp-button-shape > button');
    await randomPause();
  }

  const privacyOption = videoConfig.privacy || "PRIVATE";
  await page.click(`tp-yt-paper-radio-button[name="${privacyOption}"]`);
  await randomPause();

  if (videoConfig.scheduleDate) {
    await page.waitForSelector('#second-container-expand-button', { visible: true });
    await page.click('#second-container-expand-button');
    await randomPause();

    const [dia, mes, ano] = videoConfig.scheduleDate.split('/');
    const meses = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const youtubeDate = `${meses[parseInt(mes) - 1]} ${dia}, ${ano}`;

    await page.click('tp-yt-iron-icon#right-icon');
    await randomPause();
    await page.fill('#control-area .ytcp-date-picker input', youtubeDate);
    await page.press('#control-area .ytcp-date-picker input', 'Enter');
    await randomPause();
  }

  if (videoConfig.scheduleTime) {
    await page.waitForSelector('#second-container-expand-button', { visible: true });
    await page.click('#second-container-expand-button');
    await randomPause();

    await page.fill('#time-of-day-container input', videoConfig.scheduleTime);
    await randomPause();
  }

  await page.click('#done-button[role="button"]');
  await randomPause();

  await page.click('#close-button button[aria-label="Close"]');
  await randomPause();

  return videoUrl;
}

(async () => {
  const videosDir = 'videos';
  const configData = JSON.parse(fs.readFileSync('videos.json'));

  let selectedAccount;
  if (argv.name) {
    selectedAccount = config.accounts.find(account => account.name === argv.name);
    if (!selectedAccount) {
      console.log(color(`Conta "${argv.name}" n√£o encontrada. Usando a primeira conta.`, 33));
      selectedAccount = config.accounts[0];
    }
  } else {
    selectedAccount = config.accounts[0];
  }

  console.log(color(`Usando a conta: ${color(selectedAccount.name, 35)}`, 36));

  const dirName = slugify(selectedAccount.name, { lower: true });
  const userDataDir = path.join(rootPath, `user-data-${dirName}`);

  if (!fs.existsSync(userDataDir)) {
    console.log(color(`Sess√£o para ${selectedAccount.name} n√£o encontrada. Por favor, fa√ßa login primeiro.`, 31));
    process.exit(1);
  }

  const context = await chromium.launchPersistentContext(userDataDir, {
    headless: false,
    viewport: { width: 1280, height: 720 },
    userAgent: await getLatestUserAgent(),
    locale: 'pt-BR',
    isMobile: false,
    hasTouch: false,
    javaScriptEnabled: true,
    ignoreHTTPSErrors: true,
    args: [
      '--disable-blink-features=AutomationControlled',
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-infobars',
      '--window-position=0,0',
      '--ignore-certifcate-errors',
      '--ignore-certifcate-errors-spki-list',
    ],
  });

  const page = await context.newPage();

  for (const videoConfig of configData) {
    const videoFileName = path.parse(videoConfig.filename).name;
    const videoFiles = fs.readdirSync(videosDir).filter(file =>
      path.parse(file).name === videoFileName
    );

    if (videoFiles.length === 0) {
      console.log(color(`Arquivo de v√≠deo n√£o encontrado para: ${videoConfig.filename}`, 31));
      continue;
    }

    const filePath = path.join(videosDir, videoFiles[0]);

    try {
      const videoUrl = await uploadVideo(page, videoConfig, filePath);
      console.log(
        color(`V√≠deo ${videoConfig.filename} enviado com sucesso para a conta `, 32) +
        color(selectedAccount.name, 35) +
        color(` ${videoUrl}`, 36)
      );
    } catch (error) {
      console.error(color(`Erro ao enviar o v√≠deo ${videoConfig.filename} para a conta ${selectedAccount.name}:`, 31), error);
    }
  }

  await context.close();
})();
// fim do arquivo

// ./functions/utils.js
const UserAgent = require('user-agents');

async function getLatestUserAgent() {
  const userAgent = new UserAgent({ deviceCategory: 'desktop', platform: 'Win32' });
  return userAgent.toString();
}

function color(text, colorCode) {
  return '\x1b[' + colorCode + 'm' + text + '\x1b[0m';
}

function randomPause() {
  const min = 500; // 0.5 segundos
  const max = 1200; // 1.2 segundos
  const randomTime = Math.floor(Math.random() * (max - min + 1)) + min;
  return new Promise(resolve => setTimeout(resolve, randomTime));
}

const rootPath = process.cwd();

module.exports = {
  getLatestUserAgent,
  randomPause,
  color,
  rootPath
};
// fim do arquivo

// ./functions/videos.js
const fs = require('fs');
const { color } = require('./utils');

const videosDirectory = './videos';
const outputFilename = 'videos.json';

function createVideoObject(filename) {
  const today = new Date();
  today.setDate(today.getDate() + 1);
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const day = String(today.getDate()).padStart(2, '0');
  return {
    filename,
    scheduleDate: `${day}/${month}/${year}`
  };
}

try {
  const files = fs.readdirSync(videosDirectory);
  const videoFiles = files.map(file => createVideoObject(file));
  fs.writeFileSync(outputFilename, JSON.stringify(videoFiles, null, 2));
  console.log(color('Arquivo de videos gerado com sucesso: ', 32) + color(outputFilename, 35));
} catch (error) {
  console.error('Erro ao gerar o arquivo JSON:', error);
}
// fim do arquivo

// config.example.js
module.exports = {
  accounts: [
    { 
      name: 'conta1',
      email: 'email1@example.com',
      password: 'senha1'
    },
    { 
      name: 'conta2',
      email: 'email2@example.com',
      password: 'senha2'
    },
  ]
};
// fim do arquivo

// package.json
{
  "name": "youtube_channel",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "login": "node functions/login.js",
    "manual": "node functions/manual_login.js",
    "videos": "node functions/videos.js",
    "upload": "node functions/upload.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "fs": "^0.0.1-security",
    "path": "^0.12.7",
    "playwright": "^1.46.0",
    "slugify": "^1.6.6",
    "user-agents": "^1.1.297",
    "yargs": "^17.7.2"
  }
}

// fim do arquivo

// videos.example.json
[
  {
    "filename": "lorem_ipsum",
    "title": "T√≠tulo do V√≠deo 1",
    "description": "Descri√ß√£o detalhada do v√≠deo 1.",
    "scheduleDate": "15/08/2024",
    "scheduleTime": "03:00 PM",
    "privacy": "UNLISTED",
    "tags": [
      "tag1",
      "tag2"
    ],
    "alertSubs": true,
    "kids": false
  }
]
// fim do arquivo

